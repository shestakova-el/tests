package org.nsu.fit.services.rest;

import com.github.javafaker.Faker;
import com.github.javafaker.Name;
import lombok.extern.slf4j.Slf4j;
import org.glassfish.jersey.client.ClientConfig;
import org.nsu.fit.services.log.Logger;
import org.nsu.fit.services.rest.data.*;
import org.nsu.fit.shared.JsonMapper;

import javax.ws.rs.client.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.List;
import java.util.Random;
import java.util.UUID;

@Slf4j
public class RestClient {
    // Note: change url if you want to use the docker compose.
//    private static final String REST_URI = "http://localhost:8080/tm-backend/rest";
    private static final String REST_URI = "http://localhost:8089/tm-backend/rest";

    private final static Client client = ClientBuilder.newClient(new ClientConfig().register(RestClientLogFilter.class));

    public AccountTokenPojo authenticate(String login, String pass) {
        CredentialsPojo credentialsPojo = new CredentialsPojo();

        credentialsPojo.login = login;
        credentialsPojo.pass = pass;

        return post("authenticate", JsonMapper.toJson(credentialsPojo, true), AccountTokenPojo.class, null);
    }

    public CustomerPojo createUnValidCustomer(AccountTokenPojo accountToken, CustomerPojo contactPojo){
        return post("customers", JsonMapper.toJson(contactPojo, true), CustomerPojo.class, accountToken);
    }

    public CustomerPojo createAutoGeneratedCustomer(AccountTokenPojo accountToken) {
        ContactPojo contactPojo = new ContactPojo();
        Name faker = new Faker().name();
        // Лабораторная 3: Добавить обработку генерацию фейковых имен, фамилий и логинов.
        // * Исследовать этот вопрос более детально, возможно прикрутить специальную библиотеку для генерации фейковых данных.
        contactPojo.firstName = faker.firstName();
        contactPojo.lastName = faker.lastName();
        contactPojo.login = String.format("%s_%s@example.com", contactPojo.firstName, contactPojo.lastName);
        contactPojo.pass = new StringBuilder(String.format("%s%d%s", contactPojo.lastName,
                new Random().nextInt(400), contactPojo.firstName))
                .reverse().substring(0, 12);
        return post("customers", JsonMapper.toJson(contactPojo, true), CustomerPojo.class, accountToken);
    }

    public PlanPojo createUnValidPlan(AccountTokenPojo accountToken, PlanPojo planPojo){
        return post("plans", JsonMapper.toJson(planPojo,true), PlanPojo.class, accountToken);
    }

    public PlanPojo createPlan(AccountTokenPojo accountTokenPojo) {
        PlanPojo planPojo = new PlanPojo();
        planPojo.details = null;
        planPojo.id = UUID.randomUUID();
        planPojo.fee = 0;
        planPojo.name = "plan on 500$";
        return post("plans", JsonMapper.toJson(planPojo, true), PlanPojo.class, accountTokenPojo);
    }


    public void deletePlan(AccountTokenPojo accountTokenPojo, PlanPojo planPojo) {
        delete("plans", planPojo.id.toString(), accountTokenPojo);
    }

 /*   public SubscriptionPojo createSubscribtion (AccountTokenPojo accountTokenPojo) {
        SubscriptionPojo subscriptionPojo = new SubscriptionPojo();
        subscriptionPojo.customerId=

    }*/

    private static void delete(String path, String body, AccountTokenPojo accountToken) {
        Invocation.Builder request = client
                .target(REST_URI)
                .path(String.format("%s/%s", path, body))
                .request(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON);

        if (accountToken != null) {
            request.header("Authorization", "Bearer " + accountToken.token);
        }
        Response response;
        try {
            response = request.delete();
            Logger.info(String.format("The Response status: %s", response.getStatus()));
            Logger.info("Object deleted");
        } catch (Exception exception) {
            Logger.error("Exception was thrown:", exception);
        }
    }
    public CustomerPojo me(AccountTokenPojo accountTokenPojo){
        return get("me", accountTokenPojo, false, CustomerPojo.class);
    }

    public List<CustomerPojo> getCustomers(AccountTokenPojo accountTokenPojo) {
        return get("customers", accountTokenPojo, true, null);
    }

    private static <R> R get(String path, AccountTokenPojo accountToken, boolean isList, Class<R> responseType) {
        Invocation.Builder request = client
                .target(REST_URI)
                .path(path)
                .request(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON);

        if (accountToken != null) {
            request.header("Authorization", "Bearer " + accountToken.token);
        }
        String response = "";
        try {
            response = request.get(String.class);
            Logger.info(String.format("The Response: %s", response));
        } catch (Exception exception) {
            Logger.error("Exception was thrown:", exception);
        }
        if(isList){
            return JsonMapper.fromGenericJson(response);
        }
        return JsonMapper.fromJson(response, responseType);

    }

    private static <R> R post(String path, String body, Class<R> responseType, AccountTokenPojo accountToken) {
        // Лабораторная 3: Добавить обработку Responses и Errors. Выводите их в лог.
        // Подумайте почему в filter нет Response чтобы можно было удобно его сохранить.
        Invocation.Builder request = client
                .target(REST_URI)
                .path(path)
                .request(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON);

        if (accountToken != null) {
            request.header("Authorization", "Bearer " + accountToken.token);
        }
        String response = "";
        try {
            response = request.post(Entity.entity(body, MediaType.APPLICATION_JSON), String.class);
            Logger.info(String.format("The Response: %s", response));
        } catch (Exception exception) {
            Logger.error("Exception was thrown:", exception);
        }

        return JsonMapper.fromJson(response, responseType);
    }


    private static class RestClientLogFilter implements ClientRequestFilter {
        @Override
        public void filter(ClientRequestContext requestContext) {
            try {
                Logger.debug(requestContext.getEntity().toString());
            } catch (NullPointerException exception) {
                Logger.debug("OK");
            }

            Logger.info(requestContext.getMethod());
            Logger.info(requestContext.getStringHeaders().keySet().stream().findFirst().get());
            // Лабораторная 3: разобраться как работает данный фильтр
            // и добавить логирование METHOD и HEADERS.
        }
    }
}
